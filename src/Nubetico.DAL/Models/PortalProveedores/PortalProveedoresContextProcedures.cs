// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Nubetico.DAL.Models.PortalProveedores;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Nubetico.DAL.Models.PortalProveedores
{
    public partial class PortalProveedoresContext
    {
        private IPortalProveedoresContextProcedures _procedures;

        public virtual IPortalProveedoresContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PortalProveedoresContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPortalProveedoresContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class PortalProveedoresContextProcedures : IPortalProveedoresContextProcedures
    {
        private readonly PortalProveedoresContext _context;

        public PortalProveedoresContextProcedures(PortalProveedoresContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_obra_getResult>> sp_obra_getAsync(int? IdObra, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdObra",
                    Value = IdObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_obra_getResult>("EXEC @returnValue = [nb_pp].[sp_obra_get] @IdObra = @IdObra", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_obra_postAsync(string Nombre, DateTime? FechaInicio, DateTime? FechaFin, int? IdPersonaResidente, int? IdPersonaCoordinador, int? IdEstadoObra, int? IdTipoObra, bool? EsProyectoObra, bool? Completada, string Observaciones, OutputParameter<int?> IdObra, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdObra = new SqlParameter
            {
                ParameterName = "IdObra",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IdObra?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 250,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdPersonaResidente",
                    Value = IdPersonaResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPersonaCoordinador",
                    Value = IdPersonaCoordinador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstadoObra",
                    Value = IdEstadoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoObra",
                    Value = IdTipoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EsProyectoObra",
                    Value = EsProyectoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Completada",
                    Value = Completada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 510,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterIdObra,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [nb_pp].[sp_obra_post] @Nombre = @Nombre, @FechaInicio = @FechaInicio, @FechaFin = @FechaFin, @IdPersonaResidente = @IdPersonaResidente, @IdPersonaCoordinador = @IdPersonaCoordinador, @IdEstadoObra = @IdEstadoObra, @IdTipoObra = @IdTipoObra, @EsProyectoObra = @EsProyectoObra, @Completada = @Completada, @Observaciones = @Observaciones, @IdObra = @IdObra OUTPUT", sqlParameters, cancellationToken);

            IdObra.SetValue(parameterIdObra.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_obra_putAsync(int? IdObra, string Nombre, DateTime? FechaInicio, DateTime? FechaFin, int? IdPersonaResidente, int? IdPersonaCoordinador, int? IdEstadoObra, int? IdTipoObra, bool? EsProyectoObra, bool? Completada, string Observaciones, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdObra",
                    Value = IdObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 500,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdPersonaResidente",
                    Value = IdPersonaResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPersonaCoordinador",
                    Value = IdPersonaCoordinador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstadoObra",
                    Value = IdEstadoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoObra",
                    Value = IdTipoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EsProyectoObra",
                    Value = EsProyectoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Completada",
                    Value = Completada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 510,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [nb_pp].[sp_obra_put] @IdObra = @IdObra, @Nombre = @Nombre, @FechaInicio = @FechaInicio, @FechaFin = @FechaFin, @IdPersonaResidente = @IdPersonaResidente, @IdPersonaCoordinador = @IdPersonaCoordinador, @IdEstadoObra = @IdEstadoObra, @IdTipoObra = @IdTipoObra, @EsProyectoObra = @EsProyectoObra, @Completada = @Completada, @Observaciones = @Observaciones", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_obras_getResult>> sp_obras_getAsync(string Nombre, int? IdPersonaResidente, int? IdEstadoObra, bool? EsProyectoObra, bool? ObraTerminada, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 500,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdPersonaResidente",
                    Value = IdPersonaResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstadoObra",
                    Value = IdEstadoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EsProyectoObra",
                    Value = EsProyectoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ObraTerminada",
                    Value = ObraTerminada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_obras_getResult>("EXEC @returnValue = [nb_pp].[sp_obras_get] @Nombre = @Nombre, @IdPersonaResidente = @IdPersonaResidente, @IdEstadoObra = @IdEstadoObra, @EsProyectoObra = @EsProyectoObra, @ObraTerminada = @ObraTerminada", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
