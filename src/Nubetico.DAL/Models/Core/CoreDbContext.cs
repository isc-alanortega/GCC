// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Nubetico.DAL.Models.Core;

public partial class CoreDbContext : DbContext
{
    public CoreDbContext(DbContextOptions<CoreDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Archivos> Archivos { get; set; }

    public virtual DbSet<Archivos_Tipos> Archivos_Tipos { get; set; }

    public virtual DbSet<Domicilios> Domicilios { get; set; }

    public virtual DbSet<Domicilios_CP> Domicilios_CP { get; set; }

    public virtual DbSet<Domicilios_Colonias> Domicilios_Colonias { get; set; }

    public virtual DbSet<Domicilios_Estados> Domicilios_Estados { get; set; }

    public virtual DbSet<Domicilios_Municipios> Domicilios_Municipios { get; set; }

    public virtual DbSet<Entidades> Entidades { get; set; }

    public virtual DbSet<Forms> Forms { get; set; }

    public virtual DbSet<Forms_Respuestas> Forms_Respuestas { get; set; }

    public virtual DbSet<Forms_Respuestas_Archivos> Forms_Respuestas_Archivos { get; set; }

    public virtual DbSet<Forms_Templates> Forms_Templates { get; set; }

    public virtual DbSet<Formularios> Formularios { get; set; }

    public virtual DbSet<Menus> Menus { get; set; }

    public virtual DbSet<Modulos> Modulos { get; set; }

    public virtual DbSet<Parametros> Parametros { get; set; }

    public virtual DbSet<Permisos> Permisos { get; set; }

    public virtual DbSet<Personas> Personas { get; set; }

    public virtual DbSet<Sucursales> Sucursales { get; set; }

    public virtual DbSet<Usuarios> Usuarios { get; set; }

    public virtual DbSet<Usuarios_Estados> Usuarios_Estados { get; set; }

    public virtual DbSet<Usuarios_Menus> Usuarios_Menus { get; set; }

    public virtual DbSet<Usuarios_Permisos> Usuarios_Permisos { get; set; }

    public virtual DbSet<Usuarios_Sucursales> Usuarios_Sucursales { get; set; }

    public virtual DbSet<Usuarios_Tokens> Usuarios_Tokens { get; set; }

    public virtual DbSet<vMenusFormularios> vMenusFormularios { get; set; }

    public virtual DbSet<vUsuariosPermisos> vUsuariosPermisos { get; set; }

    public virtual DbSet<vUsuariosPersonas> vUsuariosPersonas { get; set; }

    public virtual DbSet<vUsuariosSucursales> vUsuariosSucursales { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Archivos>(entity =>
        {
            entity.HasKey(e => e.IdArchivo).HasName("PK_Archivos_IdArchivo");

            entity.ToTable("Archivos", "Core");

            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.NombreOriginal)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.RutaRelativa)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.IdArchivoTipoNavigation).WithMany(p => p.Archivos)
                .HasForeignKey(d => d.IdArchivoTipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Archivos_Tipos_IdArchivoTipo");
        });

        modelBuilder.Entity<Archivos_Tipos>(entity =>
        {
            entity.HasKey(e => e.IdArchivoTipo).HasName("PK_Archivos_Tipos_IdArchivoTipo");

            entity.ToTable("Archivos_Tipos", "Core");

            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Extension)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.MimeType)
                .IsRequired()
                .HasMaxLength(250);
        });

        modelBuilder.Entity<Domicilios>(entity =>
        {
            entity.HasKey(e => e.ID_Domicilio).HasName("PK_Core.Domicilios");

            entity.ToTable("Domicilios", "Core");

            entity.Property(e => e.Calle).HasMaxLength(50);
            entity.Property(e => e.Codigo_Postal)
                .HasMaxLength(5)
                .IsFixedLength();
            entity.Property(e => e.Descripcion).HasMaxLength(150);
            entity.Property(e => e.Entre_Calle1).HasMaxLength(50);
            entity.Property(e => e.Entre_Calle2).HasMaxLength(50);
            entity.Property(e => e.Fecha_Alta).HasColumnType("datetime");
            entity.Property(e => e.Fecha_Modificacion).HasColumnType("datetime");
            entity.Property(e => e.Numero_Exterior)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Numero_Interior)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.c_Colonia)
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.c_Estado)
                .HasMaxLength(3)
                .IsFixedLength();
            entity.Property(e => e.c_Municipio)
                .HasMaxLength(3)
                .IsFixedLength();
            entity.Property(e => e.c_Pais)
                .HasMaxLength(3)
                .IsFixedLength();
        });

        modelBuilder.Entity<Domicilios_CP>(entity =>
        {
            entity.HasKey(e => e.ID_Domicilio_CP);

            entity.ToTable("Domicilios_CP", "Core");

            entity.Property(e => e.Codigo_Postal)
                .IsRequired()
                .HasMaxLength(5)
                .IsFixedLength();
            entity.Property(e => e.c_Estado)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength();
            entity.Property(e => e.c_Municipio)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength();
        });

        modelBuilder.Entity<Domicilios_Colonias>(entity =>
        {
            entity.HasKey(e => e.ID_Domicilio_Colonia);

            entity.ToTable("Domicilios_Colonias", "Core");

            entity.Property(e => e.Codigo_Postal)
                .IsRequired()
                .HasMaxLength(5)
                .IsFixedLength();
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.c_Colonia)
                .IsRequired()
                .HasMaxLength(4)
                .IsFixedLength();
        });

        modelBuilder.Entity<Domicilios_Estados>(entity =>
        {
            entity.HasKey(e => e.ID_Domicilio_Estado);

            entity.ToTable("Domicilios_Estados", "Core");

            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.c_Estado)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength();
            entity.Property(e => e.c_Pais)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength();
        });

        modelBuilder.Entity<Domicilios_Municipios>(entity =>
        {
            entity.HasKey(e => e.ID_Domicilio_Municipio);

            entity.ToTable("Domicilios_Municipios", "Core");

            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.c_Estado)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength();
            entity.Property(e => e.c_Municipio)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength();
        });

        modelBuilder.Entity<Entidades>(entity =>
        {
            entity.HasKey(e => e.IdEntidad).HasName("PK_Entidades_IdEntidad");

            entity.ToTable("Entidades", "Core");

            entity.HasIndex(e => e.Rfc, "IX_Entidades_Rfc").IsUnique();

            entity.Property(e => e.Activo).HasDefaultValue(true);
            entity.Property(e => e.CuentaContable).HasMaxLength(20);
            entity.Property(e => e.Email).HasMaxLength(250);
            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.FechaElimina).HasColumnType("datetime");
            entity.Property(e => e.FechaModifica).HasColumnType("datetime");
            entity.Property(e => e.Folio).HasMaxLength(20);
            entity.Property(e => e.LimiteCreditoMXN).HasColumnType("money");
            entity.Property(e => e.LimiteCreditoUSD).HasColumnType("money");
            entity.Property(e => e.NombreComercial).HasMaxLength(500);
            entity.Property(e => e.RazonSocial).HasMaxLength(500);
            entity.Property(e => e.Rfc)
                .IsRequired()
                .HasMaxLength(13);
            entity.Property(e => e.SaldoMXN).HasColumnType("money");
            entity.Property(e => e.SaldoUSD).HasColumnType("money");
            entity.Property(e => e.UUID_Entidad).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Web).HasMaxLength(250);
        });

        modelBuilder.Entity<Forms>(entity =>
        {
            entity.HasKey(e => e.IdForm).HasName("PK_Forms_IdForm");

            entity.ToTable("Forms", "Core");

            entity.HasIndex(e => e.Alias, "IX_Forms_Alias").IsUnique();

            entity.Property(e => e.Alias).HasMaxLength(50);
            entity.Property(e => e.AsuntoCorreo).HasMaxLength(50);
            entity.Property(e => e.CuerpoCorreo).HasMaxLength(1000);
            entity.Property(e => e.Descripcion).HasMaxLength(100);
            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.FechaDesde).HasColumnType("datetime");
            entity.Property(e => e.FechaHasta).HasColumnType("datetime");
            entity.Property(e => e.MensajeInicio).HasMaxLength(500);
            entity.Property(e => e.MensajeRespuesta).HasMaxLength(500);
            entity.Property(e => e.Titulo).HasMaxLength(100);
            entity.Property(e => e.UrlImagen).HasMaxLength(255);

            entity.HasOne(d => d.IdFormTemplateNavigation).WithMany(p => p.Forms)
                .HasForeignKey(d => d.IdFormTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Forms_Templates_IdFormTemplate");
        });

        modelBuilder.Entity<Forms_Respuestas>(entity =>
        {
            entity.HasKey(e => e.IdFormRespuesta).HasName("PK_Forms_Respuestas_IdFormRespuesta");

            entity.ToTable("Forms_Respuestas", "Core");

            entity.Property(e => e.DireccionIP).HasMaxLength(50);
            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.Folio)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Respuesta).IsRequired();

            entity.HasOne(d => d.IdFormNavigation).WithMany(p => p.Forms_Respuestas)
                .HasForeignKey(d => d.IdForm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Forms_IdForm");
        });

        modelBuilder.Entity<Forms_Respuestas_Archivos>(entity =>
        {
            entity.HasKey(e => e.IdFormRespuestaArchivo).HasName("PK_Forms_Respuestas_Archivos_IdFormRespuestaArchivo");

            entity.ToTable("Forms_Respuestas_Archivos", "Core");

            entity.HasOne(d => d.IdArchivoNavigation).WithMany(p => p.Forms_Respuestas_Archivos)
                .HasForeignKey(d => d.IdArchivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Archivos_IdArchivo");

            entity.HasOne(d => d.IdFormRespuestaNavigation).WithMany(p => p.Forms_Respuestas_Archivos)
                .HasForeignKey(d => d.IdFormRespuesta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Forms_Respuestas_IdFormRespuesta");
        });

        modelBuilder.Entity<Forms_Templates>(entity =>
        {
            entity.HasKey(e => e.IdFormTemplate).HasName("PK_Forms_Templates_IdFormTemplate");

            entity.ToTable("Forms_Templates", "Core");
        });

        modelBuilder.Entity<Formularios>(entity =>
        {
            entity.HasKey(e => e.IdFormulario).HasName("PK_Formularios_IdFormulario");

            entity.ToTable("Formularios", "Core");

            entity.Property(e => e.ComponentNamespace).HasMaxLength(100);
            entity.Property(e => e.ComponentTypeName).HasMaxLength(100);

            entity.HasOne(d => d.IdModuloNavigation).WithMany(p => p.Formularios)
                .HasForeignKey(d => d.IdModulo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Modulos_IdModulo");
        });

        modelBuilder.Entity<Menus>(entity =>
        {
            entity.HasKey(e => e.IdMenu).HasName("PK_Menus_IdMenu");

            entity.ToTable("Menus", "Core");

            entity.Property(e => e.Descripcion).HasMaxLength(250);
            entity.Property(e => e.Habilitado).HasDefaultValue(true);
            entity.Property(e => e.IconoCss).HasMaxLength(50);
            entity.Property(e => e.IconoText).HasMaxLength(150);
            entity.Property(e => e.IconoUnicode)
                .IsRequired()
                .HasMaxLength(4)
                .HasDefaultValue("");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.NombreEN)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.RutaPagina).HasMaxLength(200);

            entity.HasOne(d => d.IdFormularioNavigation).WithMany(p => p.Menus)
                .HasForeignKey(d => d.IdFormulario)
                .HasConstraintName("FK_Menus_IdFormulario");
        });

        modelBuilder.Entity<Modulos>(entity =>
        {
            entity.HasKey(e => e.IdModulo).HasName("PK__Modulos__D9F15315FE6A5E9C");

            entity.ToTable("Modulos", "Core");

            entity.Property(e => e.EspacioNombre)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.Modulo)
                .IsRequired()
                .HasMaxLength(150);
        });

        modelBuilder.Entity<Parametros>(entity =>
        {
            entity.HasKey(e => e.IdParametro).HasName("PK_Parametros_IdParametro");

            entity.ToTable("Parametros", "Core");

            entity.Property(e => e.Alias).HasMaxLength(200);
            entity.Property(e => e.Descripcion).HasMaxLength(1000);
            entity.Property(e => e.DescripcionEN).HasMaxLength(1000);
            entity.Property(e => e.Habilitado).HasDefaultValue(true);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.NombreEN)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<Permisos>(entity =>
        {
            entity.HasKey(e => e.IdPermiso).HasName("PK_Permisos_IdPermiso");

            entity.ToTable("Permisos", "Core");

            entity.HasIndex(e => e.Alias, "IX_Permisos_Alias").IsUnique();

            entity.Property(e => e.Alias).HasMaxLength(100);
            entity.Property(e => e.Descripcion).HasMaxLength(100);
            entity.Property(e => e.DescripcionEN).HasMaxLength(100);
            entity.Property(e => e.Endpoint).HasMaxLength(100);
            entity.Property(e => e.WebMethod).HasMaxLength(20);

            entity.HasOne(d => d.IdFormularioNavigation).WithMany(p => p.Permisos)
                .HasForeignKey(d => d.IdFormulario)
                .HasConstraintName("FK_Permisos_IdFormulario");
        });

        modelBuilder.Entity<Personas>(entity =>
        {
            entity.HasKey(e => e.IdPersona).HasName("PK_Personas_IdPersona");

            entity.ToTable("Personas", "Core");

            entity.Property(e => e.CURP).HasMaxLength(18);
            entity.Property(e => e.Celular).HasMaxLength(50);
            entity.Property(e => e.Email).HasMaxLength(250);
            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.FechaElimina).HasColumnType("datetime");
            entity.Property(e => e.FechaModifica).HasColumnType("datetime");
            entity.Property(e => e.Genero).HasMaxLength(1);
            entity.Property(e => e.Nombres).HasMaxLength(100);
            entity.Property(e => e.PrimerApellido).HasMaxLength(100);
            entity.Property(e => e.RFC).HasMaxLength(13);
            entity.Property(e => e.SegundoApellido).HasMaxLength(100);
            entity.Property(e => e.Telefono).HasMaxLength(50);
        });

        modelBuilder.Entity<Sucursales>(entity =>
        {
            entity.HasKey(e => e.IdSucursal).HasName("PK_Sucursales_IdSucursal");

            entity.ToTable("Sucursales", "Core");

            entity.Property(e => e.CveSucursal).HasMaxLength(7);
            entity.Property(e => e.Denominacion).HasMaxLength(200);
            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.FechaElimina).HasColumnType("datetime");
            entity.Property(e => e.FechaModifica).HasColumnType("datetime");
        });

        modelBuilder.Entity<Usuarios>(entity =>
        {
            entity.HasKey(e => e.IdUsuario).HasName("PK_Usuarios_IdUsuario");

            entity.ToTable("Usuarios", "Core");

            entity.Property(e => e.DefaultCulture).HasMaxLength(20);
            entity.Property(e => e.DefaultTimeZone).HasMaxLength(50);
            entity.Property(e => e.FechaAlta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HeartBeat).HasColumnType("datetime");
            entity.Property(e => e.TwoFactorKey).HasMaxLength(32);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.IdPersonaNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdPersona)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_IdPersona");

            entity.HasOne(d => d.IdUsuarioEstadoNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdUsuarioEstado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_IdUsuarioEstado");
        });

        modelBuilder.Entity<Usuarios_Estados>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioEstado).HasName("PK_Usuarios_Estados_IdUsuarioEstado");

            entity.ToTable("Usuarios_Estados", "Core");

            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EstadoEN)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Usuarios_Menus>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioMenu).HasName("PK_Usuarios_Menus_IdUsuarioMenu");

            entity.ToTable("Usuarios_Menus", "Core");

            entity.HasOne(d => d.IdMenuNavigation).WithMany(p => p.Usuarios_Menus)
                .HasForeignKey(d => d.IdMenu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_Menus_IdMenu");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Usuarios_Menus)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_Menus_IdUsuario");
        });

        modelBuilder.Entity<Usuarios_Permisos>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioPermiso).HasName("PK_Usuarios_Permisos_IdUsuarioPermiso");

            entity.ToTable("Usuarios_Permisos", "Core");

            entity.HasOne(d => d.IdPermisoNavigation).WithMany(p => p.Usuarios_Permisos)
                .HasForeignKey(d => d.IdPermiso)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_Permisos_IdPermiso");

            entity.HasOne(d => d.IdSucursalNavigation).WithMany(p => p.Usuarios_Permisos)
                .HasForeignKey(d => d.IdSucursal)
                .HasConstraintName("FK_Usuarios_Permisos_IdSucursal");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Usuarios_Permisos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_Permisos_IdUsuario");
        });

        modelBuilder.Entity<Usuarios_Sucursales>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioSucursal).HasName("PK_Usuarios_Sucursales_IdUsuarioSucursal");

            entity.ToTable("Usuarios_Sucursales", "Core");

            entity.HasOne(d => d.IdSucursalNavigation).WithMany(p => p.Usuarios_Sucursales)
                .HasForeignKey(d => d.IdSucursal)
                .HasConstraintName("FK_Usuarios_Sucursales_IdSucursal");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Usuarios_Sucursales)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_Sucursales_IdUsuario");
        });

        modelBuilder.Entity<Usuarios_Tokens>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioToken).HasName("PK_Usuarios_Tokens_IdUsuarioToken");

            entity.ToTable("Usuarios_Tokens", "Core");

            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.FechaUsado).HasColumnType("datetime");
            entity.Property(e => e.VigenteHasta).HasColumnType("datetime");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Usuarios_Tokens)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_Tokens_IdUsuario");
        });

        modelBuilder.Entity<vMenusFormularios>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vMenusFormularios", "Core");

            entity.Property(e => e.ComponentNamespace).HasMaxLength(100);
            entity.Property(e => e.ComponentTypeName).HasMaxLength(100);
            entity.Property(e => e.Descripcion).HasMaxLength(250);
            entity.Property(e => e.IconoCss).HasMaxLength(50);
            entity.Property(e => e.IconoText).HasMaxLength(150);
            entity.Property(e => e.IconoUnicode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.NombreEN)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.RutaPagina).HasMaxLength(200);
        });

        modelBuilder.Entity<vUsuariosPermisos>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUsuariosPermisos", "Core");

            entity.Property(e => e.Alias).HasMaxLength(100);
            entity.Property(e => e.ComponentNamespace).HasMaxLength(100);
            entity.Property(e => e.ComponentTypeName).HasMaxLength(100);
            entity.Property(e => e.Descripcion).HasMaxLength(100);
            entity.Property(e => e.DescripcionEN).HasMaxLength(100);
            entity.Property(e => e.Endpoint).HasMaxLength(100);
            entity.Property(e => e.Sucursal).HasMaxLength(200);
            entity.Property(e => e.WebMethod).HasMaxLength(20);
        });

        modelBuilder.Entity<vUsuariosPersonas>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUsuariosPersonas", "Core");

            entity.Property(e => e.CURP).HasMaxLength(18);
            entity.Property(e => e.Celular).HasMaxLength(50);
            entity.Property(e => e.DefaultCulture).HasMaxLength(20);
            entity.Property(e => e.DefaultTimeZone).HasMaxLength(50);
            entity.Property(e => e.Email).HasMaxLength(250);
            entity.Property(e => e.FechaAlta).HasColumnType("datetime");
            entity.Property(e => e.Genero).HasMaxLength(1);
            entity.Property(e => e.HeartBeat).HasColumnType("datetime");
            entity.Property(e => e.NombreCompleto).HasMaxLength(302);
            entity.Property(e => e.Nombres).HasMaxLength(100);
            entity.Property(e => e.PrimerApellido).HasMaxLength(100);
            entity.Property(e => e.RFC).HasMaxLength(13);
            entity.Property(e => e.SegundoApellido).HasMaxLength(100);
            entity.Property(e => e.Telefono).HasMaxLength(50);
            entity.Property(e => e.TwoFactorKey).HasMaxLength(32);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.UsuarioEstado)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UsuarioEstadoEN)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<vUsuariosSucursales>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vUsuariosSucursales", "Core");

            entity.Property(e => e.CveSucursal).HasMaxLength(7);
            entity.Property(e => e.Denominacion).HasMaxLength(200);
            entity.Property(e => e.NombreComercial).HasMaxLength(500);
            entity.Property(e => e.RazonSocial).HasMaxLength(500);
            entity.Property(e => e.Rfc).HasMaxLength(13);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}