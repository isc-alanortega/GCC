// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Palmaterra.DAL.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Palmaterra.DAL.Models
{
    public partial class PalmaTerraDbContext
    {
        private IPalmaTerraDbContextProcedures _procedures;

        public virtual IPalmaTerraDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PalmaTerraDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPalmaTerraDbContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class PalmaTerraDbContextProcedures : IPalmaTerraDbContextProcedures
    {
        private readonly PalmaTerraDbContext _context;

        public PalmaTerraDbContextProcedures(PalmaTerraDbContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_auto_select_datos_obraResult>> sp_auto_select_datos_obraAsync(int? filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_auto_select_datos_obraResult>("EXEC @returnValue = [dbo].[sp_auto_select_datos_obra] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_cat_facturas_comprasResult>> sp_cat_facturas_comprasAsync(DateTime? dateFrom, DateTime? dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_cat_facturas_comprasResult>("EXEC @returnValue = [dbo].[sp_cat_facturas_compras] @DateFrom = @DateFrom, @DateTo = @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_cat_segmentos_contables_generalesResult>> sp_cat_segmentos_contables_generalesAsync(string filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Size = 50,
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_cat_segmentos_contables_generalesResult>("EXEC @returnValue = [dbo].[sp_cat_segmentos_contables_generales] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_create_vehiculoAsync(string placas, string nombre, string marca, string modelo, string vIN, int? moneda, decimal? tipoCambio, decimal? costo, int? iDResponsable, string polizaSeguro, string rutaFotografia, bool? habilitado, int? iDUsuarioAlta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Placas",
                    Size = 100,
                    Value = placas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 500,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Marca",
                    Size = 200,
                    Value = marca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Modelo",
                    Size = 200,
                    Value = modelo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VIN",
                    Size = 200,
                    Value = vIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Moneda",
                    Value = moneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoCambio",
                    Precision = 19,
                    Scale = 4,
                    Value = tipoCambio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Costo",
                    Precision = 19,
                    Scale = 4,
                    Value = costo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IDResponsable",
                    Value = iDResponsable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PolizaSeguro",
                    Size = 100,
                    Value = polizaSeguro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RutaFotografia",
                    Size = 500,
                    Value = rutaFotografia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Habilitado",
                    Value = habilitado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IDUsuarioAlta",
                    Value = iDUsuarioAlta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_create_vehiculo] @Placas = @Placas, @Nombre = @Nombre, @Marca = @Marca, @Modelo = @Modelo, @VIN = @VIN, @Moneda = @Moneda, @TipoCambio = @TipoCambio, @Costo = @Costo, @IDResponsable = @IDResponsable, @PolizaSeguro = @PolizaSeguro, @RutaFotografia = @RutaFotografia, @Habilitado = @Habilitado, @IDUsuarioAlta = @IDUsuarioAlta", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_destajo_archivo_guardarResult>> sp_destajo_archivo_guardarAsync(string folioDestajo, int? fileContentLength, int? iDResidente, string accion, string iDsDestajos, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FolioDestajo",
                    Size = 100,
                    Value = folioDestajo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FileContentLength",
                    Value = fileContentLength ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDResidente",
                    Value = iDResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "accion",
                    Size = 10,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDsDestajos",
                    Size = 50,
                    Value = iDsDestajos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_destajo_archivo_guardarResult>("EXEC @returnValue = [dbo].[sp_destajo_archivo_guardar] @FolioDestajo = @FolioDestajo, @FileContentLength = @FileContentLength, @IDResidente = @IDResidente, @accion = @accion, @IDsDestajos = @IDsDestajos", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_destajo_encabezado_addResult>> sp_destajo_encabezado_addAsync(int? idResidente, OutputParameter<string> folio, OutputParameter<int?> idDestajo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterFolio = new SqlParameter
            {
                ParameterName = "Folio",
                Size = 200,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = folio?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterIdDestajo = new SqlParameter
            {
                ParameterName = "IdDestajo",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = idDestajo?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterFolio,
                parameterIdDestajo,
                new SqlParameter
                {
                    ParameterName = "IdResidente",
                    Value = idResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_destajo_encabezado_addResult>("EXEC @returnValue = [dbo].[sp_destajo_encabezado_add] @Folio = @Folio OUTPUT, @IdDestajo = @IdDestajo OUTPUT, @IdResidente = @IdResidente", sqlParameters, cancellationToken);

            folio?.SetValue(parameterFolio.Value);
            idDestajo?.SetValue(parameterIdDestajo.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_destajo_get_nombrearchivoAsync(int? iDDestajo, OutputParameter<string> nombreArchivoSP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNombreArchivoSP = new SqlParameter
            {
                ParameterName = "NombreArchivoSP",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nombreArchivoSP?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterNombreArchivoSP,
                new SqlParameter
                {
                    ParameterName = "IDDestajo",
                    Value = iDDestajo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_destajo_get_nombrearchivo] @NombreArchivoSP = @NombreArchivoSP OUTPUT, @IDDestajo = @IDDestajo", sqlParameters, cancellationToken);

            nombreArchivoSP?.SetValue(parameterNombreArchivoSP.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_destajo_guardarAsync(int? iDRegistroEdit, int? iDObra, int? iDGasto, int? iDTrabajo, int? iDResidente, string otroConcepto, DateTime? fechaPagoEstimado, decimal? montoSolicitado, string obs, int? iDRol, bool? esContador, bool? eliminarArchivo, string accion, OutputParameter<int?> iDRegistro, OutputParameter<string> nombreArchivo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterNombreArchivo = new SqlParameter
            {
                ParameterName = "NombreArchivo",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nombreArchivo?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                parameterNombreArchivo,
                new SqlParameter
                {
                    ParameterName = "IDRegistroEdit",
                    Value = iDRegistroEdit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDObra",
                    Value = iDObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDGasto",
                    Value = iDGasto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDTrabajo",
                    Value = iDTrabajo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDResidente",
                    Value = iDResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OtroConcepto",
                    Size = 2500,
                    Value = otroConcepto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaPagoEstimado",
                    Value = fechaPagoEstimado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MontoSolicitado",
                    Precision = 19,
                    Scale = 4,
                    Value = montoSolicitado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "obs",
                    Size = 2500,
                    Value = obs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDRol",
                    Value = iDRol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EsContador",
                    Value = esContador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EliminarArchivo",
                    Value = eliminarArchivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "accion",
                    Size = 10,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_destajo_guardar] @IDRegistro = @IDRegistro OUTPUT, @NombreArchivo = @NombreArchivo OUTPUT, @IDRegistroEdit = @IDRegistroEdit, @IDObra = @IDObra, @IDGasto = @IDGasto, @IDTrabajo = @IDTrabajo, @IDResidente = @IDResidente, @OtroConcepto = @OtroConcepto, @FechaPagoEstimado = @FechaPagoEstimado, @MontoSolicitado = @MontoSolicitado, @obs = @obs, @IDRol = @IDRol, @EsContador = @EsContador, @EliminarArchivo = @EliminarArchivo, @accion = @accion", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            nombreArchivo?.SetValue(parameterNombreArchivo.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_destajo_pagarAsync(int? iDDestajo, decimal? montoEntregado, bool? autorizado, int? iDContador, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDDestajo",
                    Value = iDDestajo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MontoEntregado",
                    Precision = 19,
                    Scale = 4,
                    Value = montoEntregado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Autorizado",
                    Value = autorizado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IDContador",
                    Value = iDContador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_destajo_pagar] @IDDestajo = @IDDestajo, @MontoEntregado = @MontoEntregado, @Autorizado = @Autorizado, @IDContador = @IDContador", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_destajo_revisarAsync(int? iDDestajo, string obsRevisa, decimal? montoEntregado, bool? autorizado, int? iDCoordinador, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDDestajo",
                    Value = iDDestajo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObsRevisa",
                    Size = 2500,
                    Value = obsRevisa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MontoEntregado",
                    Precision = 19,
                    Scale = 4,
                    Value = montoEntregado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Autorizado",
                    Value = autorizado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IDCoordinador",
                    Value = iDCoordinador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_destajo_revisar] @IDDestajo = @IDDestajo, @ObsRevisa = @ObsRevisa, @MontoEntregado = @MontoEntregado, @Autorizado = @Autorizado, @IDCoordinador = @IDCoordinador", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_destajo_solicitud_addAsync(int? idEncabezadoDestajo, string folio, int? iDResidente, int? iDObra, int? iDTrabajo, int? idCoordinacion, int? iDGasto, decimal? montoSolicitado, string obs, DateTime? fechaPagoEstimado, int? iDRol, bool? esContador, int? tipoCapturaDestajista, OutputParameter<int?> iDRegistro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                new SqlParameter
                {
                    ParameterName = "IdEncabezadoDestajo",
                    Value = idEncabezadoDestajo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Folio",
                    Size = 100,
                    Value = folio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDResidente",
                    Value = iDResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDObra",
                    Value = iDObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDTrabajo",
                    Value = iDTrabajo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCoordinacion",
                    Value = idCoordinacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDGasto",
                    Value = iDGasto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MontoSolicitado",
                    Precision = 19,
                    Scale = 4,
                    Value = montoSolicitado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "obs",
                    Size = 2500,
                    Value = obs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaPagoEstimado",
                    Value = fechaPagoEstimado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IDRol",
                    Value = iDRol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EsContador",
                    Value = esContador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "TipoCapturaDestajista",
                    Value = tipoCapturaDestajista ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_destajo_solicitud_add] @IDRegistro = @IDRegistro OUTPUT, @IdEncabezadoDestajo = @IdEncabezadoDestajo, @Folio = @Folio, @IDResidente = @IDResidente, @IDObra = @IDObra, @IDTrabajo = @IDTrabajo, @IdCoordinacion = @IdCoordinacion, @IDGasto = @IDGasto, @MontoSolicitado = @MontoSolicitado, @obs = @obs, @FechaPagoEstimado = @FechaPagoEstimado, @IDRol = @IDRol, @EsContador = @EsContador, @TipoCapturaDestajista = @TipoCapturaDestajista", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_destajos_get_data_by_filterAsync(int? tipoConsulta, DateOnly? dateFrom, int? idResidente, DateOnly? dateTo, int? idObra, int? idRol, string idFiltroEstatus, string txtBusqueda, int? idFiltroResidentes, bool? esContador, bool? esCoordinador, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TipoConsulta",
                    Value = tipoConsulta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdResidente",
                    Value = idResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdObra",
                    Value = idObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdRol",
                    Value = idRol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdFiltroEstatus",
                    Size = 100,
                    Value = idFiltroEstatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TxtBusqueda",
                    Size = 510,
                    Value = txtBusqueda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFiltroResidentes",
                    Value = idFiltroResidentes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EsContador",
                    Value = esContador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EsCoordinador",
                    Value = esCoordinador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_destajos_get_data_by_filter] @TipoConsulta = @TipoConsulta, @DateFrom = @DateFrom, @IdResidente = @IdResidente, @DateTo = @DateTo, @IdObra = @IdObra, @IdRol = @IdRol, @IdFiltroEstatus = @IdFiltroEstatus, @TxtBusqueda = @TxtBusqueda, @IdFiltroResidentes = @IdFiltroResidentes, @EsContador = @EsContador, @EsCoordinador = @EsCoordinador", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_destajos_get_destajos_gastosAsync(int? idResidente, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdResidente",
                    Value = idResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_destajos_get_destajos_gastos] @IdResidente = @IdResidente", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_factura_precompraAsync(int? iDRegistroEdit, int? idproveedor, string fechafactura, string fecharecepcion, string numero, int? idobra, int? idresidente, string monto, string saldo, DateTime? fechaAlta, int? usuarioAlta, string accion, OutputParameter<int?> iDRegistro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                new SqlParameter
                {
                    ParameterName = "IDRegistroEdit",
                    Value = iDRegistroEdit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idproveedor",
                    Value = idproveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechafactura",
                    Size = 20,
                    Value = fechafactura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fecharecepcion",
                    Size = 20,
                    Value = fecharecepcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "numero",
                    Size = 50,
                    Value = numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idobra",
                    Value = idobra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idresidente",
                    Value = idresidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "monto",
                    Size = 50,
                    Value = monto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "saldo",
                    Size = 50,
                    Value = saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaAlta",
                    Value = fechaAlta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioAlta",
                    Value = usuarioAlta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Accion",
                    Size = 1,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_factura_precompra] @IDRegistro = @IDRegistro OUTPUT, @IDRegistroEdit = @IDRegistroEdit, @idproveedor = @idproveedor, @fechafactura = @fechafactura, @fecharecepcion = @fecharecepcion, @numero = @numero, @idobra = @idobra, @idresidente = @idresidente, @monto = @monto, @saldo = @saldo, @FechaAlta = @FechaAlta, @UsuarioAlta = @UsuarioAlta, @Accion = @Accion", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_cat_destajos_tiposResult>> sp_get_cat_destajos_tiposAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_cat_destajos_tiposResult>("EXEC @returnValue = [dbo].[sp_get_cat_destajos_tipos]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_cat_orden_compraResult>> sp_get_cat_orden_compraAsync(int? filtro, DateTime? dateFrom, DateTime? dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_cat_orden_compraResult>("EXEC @returnValue = [dbo].[sp_get_cat_orden_compra] @Filtro = @Filtro, @DateFrom = @DateFrom, @DateTo = @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_cat_vehiculosResult>> sp_get_cat_vehiculosAsync(string filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Size = 100,
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_cat_vehiculosResult>("EXEC @returnValue = [dbo].[sp_get_cat_vehiculos] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_catalogo_orden_compraResult>> sp_get_catalogo_orden_compraAsync(int? filtro, DateTime? dateFrom, DateTime? dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_catalogo_orden_compraResult>("EXEC @returnValue = [dbo].[sp_get_catalogo_orden_compra] @Filtro = @Filtro, @DateFrom = @DateFrom, @DateTo = @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_datos_orden_compraResult>> sp_get_datos_orden_compraAsync(int? filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_datos_orden_compraResult>("EXEC @returnValue = [dbo].[sp_get_datos_orden_compra] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_datos_orden_compra_detalleResult>> sp_get_datos_orden_compra_detalleAsync(int? filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_datos_orden_compra_detalleResult>("EXEC @returnValue = [dbo].[sp_get_datos_orden_compra_detalle] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_destajo_tipo_trabajo_gastos_generalesResult>> sp_get_destajo_tipo_trabajo_gastos_generalesAsync(int? filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_destajo_tipo_trabajo_gastos_generalesResult>("EXEC @returnValue = [dbo].[sp_get_destajo_tipo_trabajo_gastos_generales] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_detalle_prov_facturaResult>> sp_get_detalle_prov_facturaAsync(int? filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_detalle_prov_facturaResult>("EXEC @returnValue = [dbo].[sp_get_detalle_prov_factura] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_empleados_destajosResult>> sp_get_empleados_destajosAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_empleados_destajosResult>("EXEC @returnValue = [dbo].[sp_get_empleados_destajos]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_equipo_menorResult>> sp_get_equipo_menorAsync(string filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Size = 50,
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_equipo_menorResult>("EXEC @returnValue = [dbo].[sp_get_equipo_menor] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_facturas_pendientes_pagoResult>> sp_get_facturas_pendientes_pagoAsync(string dateFrom, string dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Size = 50,
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Size = 50,
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_facturas_pendientes_pagoResult>("EXEC @returnValue = [dbo].[sp_get_facturas_pendientes_pago] @DateFrom = @DateFrom, @DateTo = @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_obraResult>> sp_get_obraAsync(int? filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_obraResult>("EXEC @returnValue = [dbo].[sp_get_obra] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_obras_destajoResult>> sp_get_obras_destajoAsync(int? iDTipoDestajoObra, int? iDEmpleado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDTipoDestajoObra",
                    Value = iDTipoDestajoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDEmpleado",
                    Value = iDEmpleado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_obras_destajoResult>("EXEC @returnValue = [dbo].[sp_get_obras_destajo] @IDTipoDestajoObra = @IDTipoDestajoObra, @IDEmpleado = @IDEmpleado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_rel_destajos_tipos_gastosResult>> sp_get_rel_destajos_tipos_gastosAsync(int? iDResidente, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDResidente",
                    Value = iDResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_rel_destajos_tipos_gastosResult>("EXEC @returnValue = [dbo].[sp_get_rel_destajos_tipos_gastos] @IDResidente = @IDResidente", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_rel_destajos_tipostrabajoResult>> sp_get_rel_destajos_tipostrabajoAsync(int? filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_rel_destajos_tipostrabajoResult>("EXEC @returnValue = [dbo].[sp_get_rel_destajos_tipostrabajo] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_rel_gasto_trabajoResult>> sp_get_rel_gasto_trabajoAsync(int? iDGasto, int? iDResidente, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDGasto",
                    Value = iDGasto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDResidente",
                    Value = iDResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_rel_gasto_trabajoResult>("EXEC @returnValue = [dbo].[sp_get_rel_gasto_trabajo] @IDGasto = @IDGasto, @IDResidente = @IDResidente", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_reporte_obrasResult>> sp_get_reporte_obrasAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_reporte_obrasResult>("EXEC @returnValue = [dbo].[sp_get_reporte_obras]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_reporte_orden_compraResult>> sp_get_reporte_orden_compraAsync(string dateFrom, string dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Size = 100,
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Size = 100,
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_reporte_orden_compraResult>("EXEC @returnValue = [dbo].[sp_get_reporte_orden_compra] @DateFrom = @DateFrom, @DateTo = @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_get_reporte_pdf_paths_facturas_proveedoresAsync(string dateFrom, string dateTo, string typeDate, int? iDObra, int? iDProveedor, int? estatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Size = 100,
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Size = 100,
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeDate",
                    Size = 100,
                    Value = typeDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDObra",
                    Value = iDObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDProveedor",
                    Value = iDProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Estatus",
                    Value = estatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_reporte_pdf_paths_facturas_proveedores] @DateFrom = @DateFrom, @DateTo = @DateTo, @TypeDate = @TypeDate, @IDObra = @IDObra, @IDProveedor = @IDProveedor, @Estatus = @Estatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_rol_empleado_destajoResult>> sp_get_rol_empleado_destajoAsync(int? iDEmpleado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDEmpleado",
                    Value = iDEmpleado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_rol_empleado_destajoResult>("EXEC @returnValue = [dbo].[sp_get_rol_empleado_destajo] @IDEmpleado = @IDEmpleado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_segmento_contable_ciudad_estadoResult>> sp_get_segmento_contable_ciudad_estadoAsync(int? iDCiudad, int? iDEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCiudad",
                    Value = iDCiudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDEstado",
                    Value = iDEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_segmento_contable_ciudad_estadoResult>("EXEC @returnValue = [dbo].[sp_get_segmento_contable_ciudad_estado] @IDCiudad = @IDCiudad, @IDEstado = @IDEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_get_solicitud_destajoResult>> sp_get_solicitud_destajoAsync(int? filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_solicitud_destajoResult>("EXEC @returnValue = [dbo].[sp_get_solicitud_destajo] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_orden_compraAsync(int? iDRegistroEdit, int? idproveedor, int? idsolicitante, int? idobra, string fechaorden, string observaciones, int? usuarioAlta, string accion, int? tipoOrdenCompra, OutputParameter<int?> iDRegistro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                new SqlParameter
                {
                    ParameterName = "IDRegistroEdit",
                    Value = iDRegistroEdit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idproveedor",
                    Value = idproveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idsolicitante",
                    Value = idsolicitante ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idobra",
                    Value = idobra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechaorden",
                    Size = 50,
                    Value = fechaorden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "observaciones",
                    Size = 2500,
                    Value = observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioAlta",
                    Value = usuarioAlta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Accion",
                    Size = 1,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TipoOrdenCompra",
                    Value = tipoOrdenCompra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_orden_compra] @IDRegistro = @IDRegistro OUTPUT, @IDRegistroEdit = @IDRegistroEdit, @idproveedor = @idproveedor, @idsolicitante = @idsolicitante, @idobra = @idobra, @fechaorden = @fechaorden, @observaciones = @observaciones, @UsuarioAlta = @UsuarioAlta, @Accion = @Accion, @TipoOrdenCompra = @TipoOrdenCompra", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_orden_compra_detalleAsync(int? iDRegistroEdit, string accion, int? idordencompra, int? idproducto, int? idfactura, int? iddetalle, int? idembalaje, string cantidad, string precio, int? usuarioAlta, OutputParameter<int?> iDRegistro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                new SqlParameter
                {
                    ParameterName = "IDRegistroEdit",
                    Value = iDRegistroEdit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Accion",
                    Size = 1,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "idordencompra",
                    Value = idordencompra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idproducto",
                    Value = idproducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfactura",
                    Value = idfactura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iddetalle",
                    Value = iddetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idembalaje",
                    Value = idembalaje ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cantidad",
                    Size = 50,
                    Value = cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "precio",
                    Size = 50,
                    Value = precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioAlta",
                    Value = usuarioAlta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_orden_compra_detalle] @IDRegistro = @IDRegistro OUTPUT, @IDRegistroEdit = @IDRegistroEdit, @Accion = @Accion, @idordencompra = @idordencompra, @idproducto = @idproducto, @idfactura = @idfactura, @iddetalle = @iddetalle, @idembalaje = @idembalaje, @cantidad = @cantidad, @precio = @precio, @UsuarioAlta = @UsuarioAlta", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_pagosResult>> sp_pagosAsync(int? iDProveedor, DateTime? fecha, decimal? monto, int? iDUsuario, string comprobante, string estado, string observaciones, OutputParameter<int?> iDPago, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDPago = new SqlParameter
            {
                ParameterName = "IDPago",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDPago?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDProveedor",
                    Value = iDProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Monto",
                    Precision = 19,
                    Scale = 4,
                    Value = monto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IDUsuario",
                    Value = iDUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Comprobante",
                    Size = 5000,
                    Value = comprobante ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Estado",
                    Size = 1,
                    Value = estado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 5000,
                    Value = observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterIDPago,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_pagosResult>("EXEC @returnValue = [dbo].[sp_pagos] @IDProveedor = @IDProveedor, @Fecha = @Fecha, @Monto = @Monto, @IDUsuario = @IDUsuario, @Comprobante = @Comprobante, @Estado = @Estado, @Observaciones = @Observaciones, @IDPago = @IDPago OUTPUT", sqlParameters, cancellationToken);

            iDPago?.SetValue(parameterIDPago.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_presentacionesAsync(int? iDRegistroEdit, string nombre, string peso, int? um, string accion, OutputParameter<int?> iDRegistro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                new SqlParameter
                {
                    ParameterName = "IDRegistroEdit",
                    Value = iDRegistroEdit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 250,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Peso",
                    Size = 250,
                    Value = peso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "um",
                    Value = um ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Accion",
                    Size = 1,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_presentaciones] @IDRegistro = @IDRegistro OUTPUT, @IDRegistroEdit = @IDRegistroEdit, @Nombre = @Nombre, @Peso = @Peso, @um = @um, @Accion = @Accion", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_productosAsync(int? iDRegistroEdit, string accion, string nombre, bool? esGranel, int? iDEmbalaje, int? iDUnidadMedida, DateTime? fechaAlta, int? usuarioAlta, OutputParameter<int?> iDRegistro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                new SqlParameter
                {
                    ParameterName = "IDRegistroEdit",
                    Value = iDRegistroEdit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Accion",
                    Size = 1,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 250,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EsGranel",
                    Value = esGranel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IDEmbalaje",
                    Value = iDEmbalaje ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDUnidadMedida",
                    Value = iDUnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaAlta",
                    Value = fechaAlta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioAlta",
                    Value = usuarioAlta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_productos] @IDRegistro = @IDRegistro OUTPUT, @IDRegistroEdit = @IDRegistroEdit, @Accion = @Accion, @Nombre = @Nombre, @EsGranel = @EsGranel, @IDEmbalaje = @IDEmbalaje, @IDUnidadMedida = @IDUnidadMedida, @FechaAlta = @FechaAlta, @UsuarioAlta = @UsuarioAlta", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_productos_detalleAsync(int? iDRegistroEdit, int? idfactura, int? idproducto, int? idunidadmedida, int? idembalaje, string cantidad, string cantidadrestante, string precio, string iva, string antesimpuestos, string ivamonto, string subtotal, int? usuarioAlta, string accion, OutputParameter<int?> iDRegistro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                new SqlParameter
                {
                    ParameterName = "IDRegistroEdit",
                    Value = iDRegistroEdit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idfactura",
                    Value = idfactura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idproducto",
                    Value = idproducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idunidadmedida",
                    Value = idunidadmedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idembalaje",
                    Value = idembalaje ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cantidad",
                    Size = 50,
                    Value = cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cantidadrestante",
                    Size = 50,
                    Value = cantidadrestante ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "precio",
                    Size = 50,
                    Value = precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iva",
                    Size = 50,
                    Value = iva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "antesimpuestos",
                    Size = 50,
                    Value = antesimpuestos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ivamonto",
                    Size = 50,
                    Value = ivamonto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "subtotal",
                    Size = 50,
                    Value = subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioAlta",
                    Value = usuarioAlta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Accion",
                    Size = 1,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_productos_detalle] @IDRegistro = @IDRegistro OUTPUT, @IDRegistroEdit = @IDRegistroEdit, @idfactura = @idfactura, @idproducto = @idproducto, @idunidadmedida = @idunidadmedida, @idembalaje = @idembalaje, @cantidad = @cantidad, @cantidadrestante = @cantidadrestante, @precio = @precio, @iva = @iva, @antesimpuestos = @antesimpuestos, @ivamonto = @ivamonto, @subtotal = @subtotal, @UsuarioAlta = @UsuarioAlta, @Accion = @Accion", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_reembolso_archivo_guardarAsync(string nombreArchivo, int? iDRefund, int? iDTipoDoc, int? fileContentLength, string fileExt, string accion, bool? altaFactura, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NombreArchivo",
                    Size = 100,
                    Value = nombreArchivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDRefund",
                    Value = iDRefund ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDTipoDoc",
                    Value = iDTipoDoc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FileContentLength",
                    Value = fileContentLength ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FileExt",
                    Size = 20,
                    Value = fileExt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "accion",
                    Size = 10,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AltaFactura",
                    Value = altaFactura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_reembolso_archivo_guardar] @NombreArchivo = @NombreArchivo, @IDRefund = @IDRefund, @IDTipoDoc = @IDTipoDoc, @FileContentLength = @FileContentLength, @FileExt = @FileExt, @accion = @accion, @AltaFactura = @AltaFactura", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_reembolso_archivoxml_guardarAsync(string nombreArchivo, int? iDRefund, int? iDTipoDoc, int? fileContentLength, string proveedorNombre, string proveedorRFC, string factUUID, string factNumero, decimal? factMonto, string factFecha, string accion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NombreArchivo",
                    Size = 100,
                    Value = nombreArchivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDRefund",
                    Value = iDRefund ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDTipoDoc",
                    Value = iDTipoDoc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FileContentLength",
                    Value = fileContentLength ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProveedorNombre",
                    Size = 500,
                    Value = proveedorNombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProveedorRFC",
                    Size = 50,
                    Value = proveedorRFC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FactUUID",
                    Size = 250,
                    Value = factUUID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FactNumero",
                    Size = 250,
                    Value = factNumero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FactMonto",
                    Precision = 19,
                    Scale = 4,
                    Value = factMonto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FactFecha",
                    Size = 250,
                    Value = factFecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "accion",
                    Size = 10,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_reembolso_archivoxml_guardar] @NombreArchivo = @NombreArchivo, @IDRefund = @IDRefund, @IDTipoDoc = @IDTipoDoc, @FileContentLength = @FileContentLength, @ProveedorNombre = @ProveedorNombre, @ProveedorRFC = @ProveedorRFC, @FactUUID = @FactUUID, @FactNumero = @FactNumero, @FactMonto = @FactMonto, @FactFecha = @FactFecha, @accion = @accion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_reembolso_get_nombrearchivoAsync(int? iDRefund, OutputParameter<string> nombreArchivoSP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNombreArchivoSP = new SqlParameter
            {
                ParameterName = "NombreArchivoSP",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nombreArchivoSP?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterNombreArchivoSP,
                new SqlParameter
                {
                    ParameterName = "IDRefund",
                    Value = iDRefund ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_reembolso_get_nombrearchivo] @NombreArchivoSP = @NombreArchivoSP OUTPUT, @IDRefund = @IDRefund", sqlParameters, cancellationToken);

            nombreArchivoSP?.SetValue(parameterNombreArchivoSP.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_reembolso_guardarAsync(int? iDRegistroEdit, int? iDObra, int? iDTipoPago, int? iDTipoDoc, int? iDResidente, int? iDConcepto, int? iDCoordinador, int? iDUsuarioSolicita, int? iDRol, decimal? montoManual, string nombreProvManual, string numTicketManual, string obs, bool? esCoordinador, bool? esContador, string accion, OutputParameter<int?> iDRegistro, OutputParameter<string> nombreArchivo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterNombreArchivo = new SqlParameter
            {
                ParameterName = "NombreArchivo",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nombreArchivo?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                parameterNombreArchivo,
                new SqlParameter
                {
                    ParameterName = "IDRegistroEdit",
                    Value = iDRegistroEdit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDObra",
                    Value = iDObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDTipoPago",
                    Value = iDTipoPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDTipoDoc",
                    Value = iDTipoDoc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDResidente",
                    Value = iDResidente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDConcepto",
                    Value = iDConcepto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDCoordinador",
                    Value = iDCoordinador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDUsuarioSolicita",
                    Value = iDUsuarioSolicita ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDRol",
                    Value = iDRol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "montoManual",
                    Precision = 19,
                    Scale = 4,
                    Value = montoManual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "nombreProvManual",
                    Size = 500,
                    Value = nombreProvManual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "numTicketManual",
                    Size = 250,
                    Value = numTicketManual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "obs",
                    Size = 2500,
                    Value = obs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EsCoordinador",
                    Value = esCoordinador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EsContador",
                    Value = esContador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "accion",
                    Size = 10,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_reembolso_guardar] @IDRegistro = @IDRegistro OUTPUT, @NombreArchivo = @NombreArchivo OUTPUT, @IDRegistroEdit = @IDRegistroEdit, @IDObra = @IDObra, @IDTipoPago = @IDTipoPago, @IDTipoDoc = @IDTipoDoc, @IDResidente = @IDResidente, @IDConcepto = @IDConcepto, @IDCoordinador = @IDCoordinador, @IDUsuarioSolicita = @IDUsuarioSolicita, @IDRol = @IDRol, @montoManual = @montoManual, @nombreProvManual = @nombreProvManual, @numTicketManual = @numTicketManual, @obs = @obs, @EsCoordinador = @EsCoordinador, @EsContador = @EsContador, @accion = @accion", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            nombreArchivo?.SetValue(parameterNombreArchivo.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_reembolso_pagarAsync(int? iDRefund, bool? autorizado, int? iDContador, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDRefund",
                    Value = iDRefund ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Autorizado",
                    Value = autorizado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IDContador",
                    Value = iDContador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_reembolso_pagar] @IDRefund = @IDRefund, @Autorizado = @Autorizado, @IDContador = @IDContador", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_reembolso_revisarAsync(int? iDRefund, string obsRevisa, bool? autorizado, int? iDCoordinador, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDRefund",
                    Value = iDRefund ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObsRevisa",
                    Size = 2500,
                    Value = obsRevisa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Autorizado",
                    Value = autorizado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IDCoordinador",
                    Value = iDCoordinador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_reembolso_revisar] @IDRefund = @IDRefund, @ObsRevisa = @ObsRevisa, @Autorizado = @Autorizado, @IDCoordinador = @IDCoordinador", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_reporte_imprimir_orden_compraResult>> sp_reporte_imprimir_orden_compraAsync(int? filtro, int? filtro2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Filtro2",
                    Value = filtro2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_reporte_imprimir_orden_compraResult>("EXEC @returnValue = [dbo].[sp_reporte_imprimir_orden_compra] @Filtro = @Filtro, @Filtro2 = @Filtro2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_reporte_programacionResult>> sp_reporte_programacionAsync(DateTime? dateFrom, DateTime? dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_reporte_programacionResult>("EXEC @returnValue = [dbo].[sp_reporte_programacion] @DateFrom = @DateFrom, @DateTo = @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_segmento_contable_addAsync(string segmento, OutputParameter<bool?> success, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterSuccess = new SqlParameter
            {
                ParameterName = "Success",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = success?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterSuccess,
                new SqlParameter
                {
                    ParameterName = "Segmento",
                    Size = 100,
                    Value = segmento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_segmento_contable_add] @Success = @Success OUTPUT, @Segmento = @Segmento", sqlParameters, cancellationToken);

            success?.SetValue(parameterSuccess.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_set_delete_destajoAsync(int? filtro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Filtro",
                    Value = filtro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_set_delete_destajo] @Filtro = @Filtro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_set_orden_compraAsync(int? iDRegistroEdit, int? idproveedor, int? idsolicitante, int? idobra, string fechaorden, string observaciones, int? usuarioAlta, string accion, int? tipoOrdenCompra, OutputParameter<int?> iDRegistro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDRegistro = new SqlParameter
            {
                ParameterName = "IDRegistro",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = iDRegistro?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDRegistro,
                new SqlParameter
                {
                    ParameterName = "IDRegistroEdit",
                    Value = iDRegistroEdit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idproveedor",
                    Value = idproveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idsolicitante",
                    Value = idsolicitante ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idobra",
                    Value = idobra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechaorden",
                    Size = 50,
                    Value = fechaorden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "observaciones",
                    Size = 2500,
                    Value = observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioAlta",
                    Value = usuarioAlta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Accion",
                    Size = 1,
                    Value = accion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TipoOrdenCompra",
                    Value = tipoOrdenCompra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_set_orden_compra] @IDRegistro = @IDRegistro OUTPUT, @IDRegistroEdit = @IDRegistroEdit, @idproveedor = @idproveedor, @idsolicitante = @idsolicitante, @idobra = @idobra, @fechaorden = @fechaorden, @observaciones = @observaciones, @UsuarioAlta = @UsuarioAlta, @Accion = @Accion, @TipoOrdenCompra = @TipoOrdenCompra", sqlParameters, cancellationToken);

            iDRegistro?.SetValue(parameterIDRegistro.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_update_vehiculoAsync(int? iDVehiculo, string placas, string nombre, string marca, string modelo, string vIN, int? moneda, decimal? tipoCambio, decimal? costo, int? iDResponsable, string polizaSeguro, string rutaFotografia, bool? habilitado, int? iDUsuarioModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDVehiculo",
                    Value = iDVehiculo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Placas",
                    Size = 100,
                    Value = placas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 500,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Marca",
                    Size = 200,
                    Value = marca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Modelo",
                    Size = 200,
                    Value = modelo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VIN",
                    Size = 200,
                    Value = vIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Moneda",
                    Value = moneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoCambio",
                    Precision = 19,
                    Scale = 4,
                    Value = tipoCambio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "Costo",
                    Precision = 19,
                    Scale = 4,
                    Value = costo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IDResponsable",
                    Value = iDResponsable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PolizaSeguro",
                    Size = 100,
                    Value = polizaSeguro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RutaFotografia",
                    Size = 500,
                    Value = rutaFotografia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Habilitado",
                    Value = habilitado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IDUsuarioModificacion",
                    Value = iDUsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_vehiculo] @IDVehiculo = @IDVehiculo, @Placas = @Placas, @Nombre = @Nombre, @Marca = @Marca, @Modelo = @Modelo, @VIN = @VIN, @Moneda = @Moneda, @TipoCambio = @TipoCambio, @Costo = @Costo, @IDResponsable = @IDResponsable, @PolizaSeguro = @PolizaSeguro, @RutaFotografia = @RutaFotografia, @Habilitado = @Habilitado, @IDUsuarioModificacion = @IDUsuarioModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
